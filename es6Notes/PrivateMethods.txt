const budget=()=>
{
let balance=0;
let changeBal=(val)=>{
	return balance+=val;
}

const deposit20=()=>changeBal(20);

const check=()

return {
deposit20:deposit20
}
}

let wallet=budget();
console.log(wallet);
wallet.deposit20();

    Closures in JavaScript and ES6 refer to functions that remember their creation environment and can further reference that environment’s independent variables.

    Lexical scoping refers to the JavaScript concept of programs keeping track of variable locations to understand in which scopes they can be accessed.

    Function factories create functions based on returning inner functions that manipulate its own arguments and the arguments of the outer function.

    Data encapsulation and private methods don’t exist natively in JavaScript but can be emulated with closures for data restriction and limited access.


